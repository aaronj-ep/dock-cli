#!/usr/bin/env zsh

## region ############################################## Variables

# Static Variables
myName="dock-cli"
errText=""
myChain=""
myIdent=""

# Git Derived
xGit=$(which git)
diff=$($xGit diff-index HEAD --)
oVer=$($xGit describe --abbrev=0 --tags 2> /dev/null | /usr/bin/sed 's/^v//')
[ -z "$oVer" ] && oVer="1.0.0"
nVer="$oVer"
nBuild=""

# Path Variables
myPath="${0:a:h}"
projPath=$(/usr/bin/dirname "$myPath")
distPath="${projPath}/dist"
buildPath="${distPath}/build"
srcPath="${projPath}/src"
srcFile="${srcPath}/${myName}.sh"
destFile="${distPath}/${myName}"
projFile="${srcPath}/${myName}.pkgproj"
[ ! -d "distPath" ] && /bin/mkdir -p "$distPath"

## endregion ################################### End Variables

## region ###################################### Version Functions

# @description Extracts the major component of a version number.
# @arg $1 string Version
# @stdout string Major Component
version::major() {
  echo "$1" | /usr/bin/awk -F'.' '{ print $1 }'
}

# @description Extracts the minor component of a version number.
# @arg $1 string Version
# @stdout string Minor Component
version::minor() {
  echo "$1" | /usr/bin/awk -F'.' '{ print $2 }'
}

# @description Extracts the revision component of a version number.
# @arg $1 string Version
# @stdout string Minor Component
version::revision() {
  echo "$1" | /usr/bin/awk -F'.' '{ print $3 }'
}

# @description Increments a the version number
# @noargs
version::increment() {
  local oMaj oMin oRev
  local nMaj nMin nRev nBuild

  oMaj=$(version::major "$oVer")
  oMin=$(version::minor "$oVer")
  oRev=$(version::revision "$oVer")

  if $isMajor; then
    nMaj=$((oMaj+1))
    nRev="0"
  else
    nMaj="$oMaj"
  fi

  if $isMinor; then
    nMin=$((oMin+1))
    nRev="0"
  elif $isMajor; then
    nMin=0
  else
    nMin="$oMin"
  fi

  if $isPatch; then
    nRev=$((oRev+1))
  elif $isMajor || $isMinor; then
    nRev=0
  else
    nRev="$oRev"
  fi

  nVer=$nMaj
  if [ "$nMin" -gt "0" ] || [ "$nMin" -eq "0" ] || [ "$nRev" -gt "0" ] || [ -n "$DIFF" ]; then
    nVer="$nVer.$nMin"
  fi

  if [ "$nRev" -gt "0" ]; then
    nVer="$nVer.$nRev"
  fi

  if [ -n "$diff" ]; then
    nBuild=$($xGit rev-parse --short HEAD)
    nVer="$nVer-${nBuild}"
  fi
}

## endregion ################################### Version Functions

## region ###################################### Packages Build

# @description Prepares the main script for distribution.
# @noargs
function build::script() {
  /bin/cp "$srcFile" "$destFile"
  /usr/bin/sed -i '' "s/###version###/$nVer/" "${destFile}"
  return 0
}

# @description Builds the distribution package using Packages, then renames the output with the version number.
# @noargs
# @exitcode 0 Success
# @exitcode 1 Failure
function build::package() {
  local retval logFile args

  # Build packagesbuild Arguments
  typeset -a args
  args=(--project "$projFile" --build-folder "$buildPath" --package-version "$nVer")
  if [ -n "$myIdent" ]; then
    args+=(--identity "$myIdent")
    if [ -n "$myChain" ]; then
      args+=(--keychain "$myChain")
    fi
  fi

  # Temporary Location for Output
  logFile=$(/usr/bin/mktemp)

  # Run Command
  /usr/local/bin/packagesbuild "${args[@]}" >"$logFile" 2>&1
  retval=$?
  if [ "0" -eq "$retval" ]; then
    # Rename with Version in Filename
    mv "${buildPath}/${myName}.pkg" "${buildPath}/${myName}-${nVer}.pkg"
    rm "$logFile"
    return 0
  else
    errText=$(cat "$logFile")
    rm "$logFile"
    return 1
  fi
}

function build::notarize() {
  local tmpFile

  tmpFile=$(mktemp)
  if ! xcrun notarytool submit "${buildPath}/${myName}-${nVer}.pkg" --keychain-profile "${myProfile}" --wait > "$tmpFile" 2>&1; then
    echo "ERROR Notarizing Package:"
    echo "-------"
    cat "$tmpFile"
    echo "-------"
    echo "For additional information, run:"
    echo "  xcrun notarylog <submission-id-above> --keychain-profile \"${myProfile}\""
    return 1
  fi

  notarizeId=$(cat "$tmpFile" | grep "id: " | tail -1 | awk '{ print $2 }')

  return 0
}

function build::push() {
  git tag -a "v${nVer}" -m "v${nVer} (Built with /bin/build)"> /dev/null 2>&1
  git push --follow-tags > /dev/null 2>&1
}

## endregion ################################### Packages Build

## region ###################################### Input Handling

isMajor=false
isMinor=false
isPatch=false
isPush=false
notarizeId=""
while [ "$1" != "" ]; do
  # Check flags
  case "$1" in
    --major )                   isMajor=true;                ;;
    --minor )                   isMinor=true;                ;;
    --patch )                   isPatch=true;                ;;
    --push )                    isPush=true;                 ;;
    --identity )                myIdent="$2"; shift;         ;;
    --keychain )                myChain="$2"; shift;         ;;
    --notarize )                myProfile="$2"; shift;       ;;
  esac
  shift # move to next kv pair
done

# Default to Login Keychain
[ -n "$myIdent" ] && [ -z "$myChain" ] && myChain="$HOME/Library/Keychains/login.keychain"

## endregion ################################### Packages Build

## region ###################################### Main Code

! version::increment && echo "Error while Incrementing Version" && exit 1
! build::script && echo "ERROR Building Script" && exit 1
! build::package && echo "ERROR Building Package:" && echo "$errText" && exit 1
echo "Version:   ${oVer} => ${nVer}"
echo "Package:   ${buildPath}/${myName}-${nVer}.pkg"
echo "Identity:  ${myIdent}"

if [ -n "$myProfile" ]; then
  ! build::notarize && exit 1
  echo "Notary ID: ${notarizeId}"
fi

if [ -z "$nBuild" ] && $isPush; then
  ! build::push && echo "ERROR Pushing Tags" && exit 1
  echo "Tagged:    v${nVer}"
fi

exit 0

## endregion ################################### End Main Code
